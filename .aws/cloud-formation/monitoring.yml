AWSTemplateFormatVersion: 2010-09-09
Description: 'Stack to setup monitoring of the application.'

Resources:
  cloudwatchLogsLogGroupLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/paystring-uptime-monitor
      RetentionInDays: 7

  iamLambdaMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: inline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/paystring-uptime-monitor"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/paystring-uptime-monitor:*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - "*"
      RoleName: !Join
        - "-"
        - - "paystring-lambda-uptime-monitor"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
    DependsOn:
      - cloudwatchLogsLogGroupLambda

  lambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            /**
             * The original code for this function originally came from https://github.com/wmnnd/lambda-watchtower/blob/master/index.js
             * It has since been minified to fit within the 4096 limit size of inline code.
             */
            const https=require("https"),http=require("http"),net=require("net"),{hrtime:hrtime}=process,AWS=require("aws-sdk"),cloudwatch=new AWS.CloudWatch,hrToMs=t=>Math.round(1e3*t[0]+t[1]/1e6),hrDiff=(t,e)=>hrToMs(e)-hrToMs(t),timingsDiff=(t,e,s)=>t[e]&&t[s]&&hrDiff(t[e],t[s])||-1,defaultTimeout=2e3,processTimings=function(t){return{lookup:timingsDiff(t,"start","lookup"),connect:timingsDiff(t,"lookup","connect"),secureConnect:timingsDiff(t,"connect","secureConnect"),readable:timingsDiff(t,"secureConnect","readable")||timingsDiff(t,"connect","readable"),close:timingsDiff(t,"readable","close"),total:timingsDiff(t,"start","close")}},createRequest=function(t,e){return(t.startsWith("http://")?http:https).get(t,e)},sendData=(t,e)=>Promise.all(t.reduce((t,e)=>{let s=t[t.length-1];return!s||s.length>=10?t.push([e]):s.push(e),t},[]).map(t=>cloudwatch.putMetricData({Namespace:e.namespace||"Watchtower",MetricData:t}).promise())),handlers={};exports.handler=function(t,e,s){const n=t.targets;n||s("No targets given");const i=n.map(e=>new Promise((s,n)=>{const i={name:e.name||e.url,timings:{start:hrtime()}};switch(e.type){case"smtp":handlers.smtp(e,i,t,s,n);break;case"port":handlers.port(e,i,t,s,n);break;default:handlers.http(e,i,t,s,n)}}));return Promise.all(i).then(e=>{const n=new Date,i=t.logTimings||["readable","total"],o=e.map(t=>{const e=i.map(e=>({MetricName:`timing-${e}`,Dimensions:[{Name:t.name,Value:`Timing: ${e}`}],Value:t.durations[e],Unit:"Milliseconds",Timestamp:n}));return[{MetricName:"status",Dimensions:[{Name:t.name,Value:"HTTP Status"}],Value:t.statusCode,Timestamp:n},...e]}).reduce((t,e)=>[...t,...e],[]);return sendData(o,t).then(t=>{s(null,t)}).catch(t=>{s(t,null)})}).catch(t=>{s(t)})},handlers.http=((t,e,s,n,i)=>{const o=createRequest(t.url,t=>{e.statusCode=t.statusCode,t.once("readable",()=>e.timings.readable=hrtime()),t.once("end",()=>e.timings.end=hrtime())});o.setTimeout(1);const r=setTimeout(()=>o.abort(),s.timeout||2e3);o.on("socket",t=>{t.on("lookup",()=>e.timings.lookup=hrtime()),t.on("connect",()=>e.timings.connect=hrtime()),t.on("secureConnect",()=>e.timings.secureConnect=hrtime())}),o.on("close",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),clearTimeout(r),n(e)}),o.on("error",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=void 0!==e.statusCode?e.statusCode:0,clearTimeout(r),n(e)})}),handlers.port=((t,e,s,n,i)=>{const o=new net.Socket;o.setTimeout(s.timeout||2e3),o.on("connect",()=>{e.timings.connect=hrtime()}),o.on("lookup",()=>{e.timings.lookup=hrtime()}),o.on("data",()=>{e.timings.readable=hrtime(),o.end()}),o.on("end",()=>{e.timings.end=hrtime()}),o.on("error",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=-1,o.destroy(),n(e)}),o.on("timeout",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=-1,o.destroy(),n(e)}),o.on("close",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=0,o.destroy(),n(e)}),o.connect(t.port,t.hostname,()=>{})}),handlers.smtp=((t,e,s,n,i)=>{const o=new net.Socket,r={};o.setTimeout(s.timeout||2e3),o.setEncoding("utf8"),o.on("connect",()=>{e.timings.connect=hrtime()}),o.on("lookup",()=>{e.timings.lookup=hrtime()}),o.on("data",t=>{t.match(/^220/)&&!0!==r.greeting?(o.write("EHLO lambda-watchtower.test\r\n","utf8"),r.greeting=!0):t.match(/^250/)&&(e.timings.readable=hrtime(),o.end())}),o.on("end",()=>{e.timings.end=hrtime()}),o.on("error",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=-1,o.destroy(),n(e)}),o.on("timeout",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=-1,o.destroy(),n(e)}),o.on("close",()=>{e.timings.close=hrtime(),e.durations=processTimings(e.timings),e.statusCode=0,o.destroy(),n(e)}),o.connect(t.port,t.hostname,()=>{})});
        Description: Function to be triggered by CloudWatch Events to check the status of the app and push metrics into CloudWatch.
        FunctionName: !Join
          - "-"
          - - "paystring-lambda-uptime-monitor"
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
        Handler: index.handler
        MemorySize: 128
        Role: !GetAtt iamLambdaMonitoringRole.Arn
        Runtime: nodejs12.x
        Timeout: 5
      DependsOn:
        - iamLambdaMonitoringRole

  cloudwatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers the lambda function to rune every minute of every day.
      Name: !Join
        - "-"
        - - "paystring-lambda-uptime-monitor-trigger"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ScheduleExpression: cron(* * * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: !Join
            - "-"
            - - "paystring-lambda-uptime-monitor-trigger"
              - !Select
                - 0
                - !Split
                  - "-"
                  - !Select
                    - 2
                    - !Split
                      - "/"
                      - !Ref "AWS::StackId"
          Input:
            !Sub
              - |
                {
                  "targets": [
                    {
                      "url": "https://${appHostname}",
                      "name": "web-server"
                    }
                  ],
                  "namespace": "paystring",
                  "timings": [
                    "readable",
                    "total"
                  ],
                  "timeout": 2000
                }
              - appHostname: !ImportValue appHostname
    DependsOn:
      - lambdaFunction
  cloudwatchEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref lambdaFunction
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt: cloudwatchEventRule.Arn
    DependsOn:
      - lambdaFunction
      - cloudwatchEventRule

  cloudwatchAppDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Fn::ImportValue: snsNotificationTopicErrors
      AlarmDescription: Alarm when something higher than 200 status code is reported.
      AlarmName: !Join
        - "-"
        - - "paystring-non-200-status-code"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: web-server
          Value: "HTTP Status"
      EvaluationPeriods: 3
      InsufficientDataActions:
        - Fn::ImportValue: snsNotificationTopicErrors
      MetricName: status
      Namespace: paystring
      OKActions:
        - Fn::ImportValue: snsNotificationTopicErrors
      Period: 60
      Statistic: Sum
      Threshold: 200
      TreatMissingData: breaching