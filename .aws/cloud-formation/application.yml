AWSTemplateFormatVersion: 2010-09-09
Description: 'Application layer of the PayID validator service.'
Parameters:
  paramAppServerAmiId:
    Type: String
    Default: ami-09d95fab7fff3776c
  paramAppServerKeyId:
    Type: String
    Default: payid
  paramAppHostname:
    Type: String
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    Default: test.payidvalidator.com
    Description: Hostname of the payid instance being served. (payidvalidator.com, test.payidvalidator.com, etc.)
  paramCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:297343154153:certificate/df6ce819-a0d6-4e12-abce-8e78b0639b9a

Resources:
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: true
      Name: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      SecurityGroups:
        - Fn::ImportValue: securityGroupLoadBalancer
      Subnets:
        - Fn::ImportValue: infrastructureVpcSubnetIdA
        - Fn::ImportValue: infrastructureVpcSubnetIdB
        - Fn::ImportValue: infrastructureVpcSubnetIdC
      Type: application
  loadBalancerDefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: false
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: infrastructureVpcId
  loadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref paramCertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref loadBalancerDefaultTargetGroup
          Type: forward
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS
    DependsOn:
      - loadBalancerDefaultTargetGroup
      - loadBalancer

  cloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref paramAppHostname
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /error-pages/404.html
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error-pages/404.html
          - ErrorCachingMinTTL: 60
            ErrorCode: 500
            ResponseCode: 500
            ResponsePagePath: /error-pages/500.html
        DefaultCacheBehavior:
          TargetOriginId: elb-payid-1
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - HEAD
            - GET
          ForwardedValues:
            QueryString: true
            Headers:
              - "*"
            Cookies:
              Forward: all
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !GetAtt loadBalancer.DNSName
            Id: elb-payid-1
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn:
            Ref: paramCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
    DependsOn: loadBalancer

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - "-"
        - - "payid-validator"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1
          Id: DeletePartialUploadsAfter1Day
          NoncurrentVersionExpirationInDays: 30
          Prefix: code-build/
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled

  ssmParameterCloudwatchAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Config file for the Cloudwatch Agent to store logs
      Name: !Join
        - "-"
        - - "cloudwatch-config"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Tier: Standard
      Type: String
      Value: >
        {
          "agent": {
            "run_as_user": "root"
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/httpd/access_log",
                    "log_group_name": "access_log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/httpd/error_log",
                    "log_group_name": "error_log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/php-fpm/www-error.log",
                    "log_group_name": "php_error_www",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              }
            }
          }
        }

  iamAppServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: inline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - ec2:DescribeVolumes
                  - ec2:DescribeTags
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:*:*:parameter/${ssmParameterCloudwatchAgentConfig}"
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !GetAtt s3Bucket.Arn
                  - !Sub "${s3Bucket.Arn}/*"
                  - "arn:aws:s3:::aws-codedeploy-us-east-1/*"
      RoleName: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
    DependsOn:
      - s3Bucket
      - ssmParameterCloudwatchAgentConfig
  iamAppServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Roles:
        - Ref: iamAppServerRole
    DependsOn:
      - iamAppServerRole

  ec2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: true
              VolumeSize: 8
              VolumeType: gp2
        EbsOptimized: false
        IamInstanceProfile:
          Arn: !GetAtt iamAppServerInstanceProfile.Arn
        ImageId: !Ref paramAppServerAmiId
        InstanceType: t3a.medium
        KeyName: !Ref paramAppServerKeyId
        SecurityGroupIds:
          - Fn::ImportValue: securityGroupEc2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum -y update
            yum -y install ruby
            yum -y install wget

            amazon-linux-extras install -y php7.2

            yum -y install httpd
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

            # Install CloudWatch Agent
            wget https://s3.us-east-1.amazonaws.com/amazoncloudwatch-agent-us-east-1/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
            rm -f ./amazon-cloudwatch-agent.rpm
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:${ssmParameterCloudwatchAgentConfig}

            # Install CodeDeploy Agent
            wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            rm -f ./install
    DependsOn:
      - iamAppServerRole
      - iamAppServerInstanceProfile

  ec2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join
        - "-"
        - - "app"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: 120
      DesiredCapacity: 0
      HealthCheckGracePeriod: 240
      HealthCheckType: EC2
      MaxSize: 4
      MinSize: 0
      LaunchTemplate:
        LaunchTemplateId:
          !Ref ec2LaunchTemplate
        Version:
          !GetAtt ec2LaunchTemplate.LatestVersionNumber
      TerminationPolicies:
        - Default
      VPCZoneIdentifier:
        - Fn::ImportValue: infrastructureVpcSubnetIdA
        - Fn::ImportValue: infrastructureVpcSubnetIdB
        - Fn::ImportValue: infrastructureVpcSubnetIdC
    DependsOn:
      - ec2LaunchTemplate


Outputs:
  s3Bucket:
    Description: S3 Bucket name
    Value: !Ref s3Bucket
    Export:
      Name: s3Bucket
